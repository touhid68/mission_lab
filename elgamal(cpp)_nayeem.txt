#include<bits/stdc++.h>
using namespace std;
#define INF  1000000000000000000
#define ll long long int
#define vi vector<int>
#define vs vector<string>
#define vii vector<long long int>
int gcd(int a,int b)
{
    while(b)
    {
        a=a%b;
        swap(a,b);
    }
    return a;
}
int multiplicative_inverse(int e,int phi){
    int d=0;
    int x1=0,x2=1,y1=1;
    int temp_phi=phi;
    while(e>0){
        int temp1=temp_phi/e;
        int temp2=temp_phi-temp1*e;
        temp_phi=e;
        e=temp2;
        int x=x2-temp1*x1;
        int y=d-temp1*y1;
        x2=x1;
        x1=x;
        d=y1;
        y1=y;
    }
    if(temp_phi==1){
         return d+phi;
    }
    else return d+phi;
}
int main()
{
    int p=101;
    int g=2;
    int x=3;
    int y=pow(g,x);
    y=y%p;
    cout<<"y: "<<y<<endl;
    int msg;
    cout<<"Enter message: "<<endl;
    cin>>msg;
    int r=5;
    //Encryption
    int c1=pow(g,r);
    c1=c1%p;
    int c2=(msg*pow(y,r));
    c2=c2%p;
    cout<<"CryptedText1: "<<c1<<endl;
    cout<<"CryptedText2: "<<c2<<endl;
    //Decryption
    int n=pow(c1,x);
    //n=n%p;
    int n2=multiplicative_inverse(n,p);
    n2=n2%p;
    int c=c2*n2;
    int decryptedText=c%p;
    cout<<"DecryptedText: "<<decryptedText<<endl;

    //cout<<multiplicative_inverse(3,26)<<endl;
    return 0;
}